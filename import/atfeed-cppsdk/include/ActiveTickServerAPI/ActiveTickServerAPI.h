#pragma once		

#ifdef _WIN32
#include <Windows.h>
#endif

#include <Shared/ATServerAPIDefines.h>

/**
*	Default timeout value for ATSendRequest function
*	@see ATSendRequest()
*/
#define DEFAULT_REQUEST_TIMEOUT 30000

/*----------------------------------------------------------------------------------------------------------------------------------------
* Call back functions
* ----------------------------------------------------------------------------------------------------------------------------------------
*/

/**
 * Callback for all Bar history responses. This function is called asynchronously by ActiveTick API's internal thread in response to ATCreateBarHistoryDbRequest/ATSendRequest 
 * call sequence.
 * @param origRequest Original request generated by one of the ATCreateBarHistoryDbRequest functions. Use ATCloseRequest function to close the request handle inside your 
 *	callback handler.
 * @param responseType One of the ATBarHistoryResponseType response type values.
 * @param pResponse Pointer to ATBARHISTORY_RESPONSE structure containing the response payload.
 * @see ATBarHistoryResponseType
 * @see LPATBARHISTORY_RESPONSE
 * @see ATCreateBarHistoryDbRequest
 * @see ATSendRequest
 * @see ATCloseRequest
 */
typedef void (*ATBarHistoryResponseCallback)(
	uint64_t origRequest, 
	ATBarHistoryResponseType responseType, 
	LPATBARHISTORY_RESPONSE pResponse);

/**
*	Callback for login response. This function is called asynchronously by the ActiveTick API's internal thread in response to ATCreateLoginRequest/ATSendRequest call sequence.
*	@param session Session handle for which the response is intended.
*	@param request Original request generated by ATCreateLoginRequest function. Use ATCloseRequest function to close the request handle inside your callback handler.
*	@param pResponse Pointer to ATLOGIN_RESPONSE structure containing the login response payload.
*	@see LPATBARHISTORY_RESPONSE
*	@see ATCreateLoginRequest
*	@see ATSendRequest
*	@see ATCloseRequest
*/
typedef void (*ATLoginResponseCallback)(
	uint64_t session, 
	uint64_t request, 
	LPATLOGIN_RESPONSE pResponse);

/**
*	Callback for market movers database snapshot response. This function is called asynchronously by the ActiveTick API's internal thread in response to 
*	ATCreateMarketMoversDbRequest/ATSendRequest call sequence.
*	@param origRequest Original request generated by ATCreateMarketMoversDbRequest function. Use ATCloseRequest function to close the request handle inside your callback handler.
*	@param responseType One of the ATMarketMoversDbResponseType enum items.
*	@param pResponse Pointer to ATMARKET_MOVERSDB_RESPONSE structure containing the market movers database snapshot response payload.
*	@see ATMarketMoversDbResponseType
*	@see LPATLOGIN_RESPONSE
*	@see ATCreateMarketMoversDbRequest
*	@see ATSendRequest
*	@see ATCloseRequest
*/
typedef void (*ATMarketMoversDbResponseCallback)(
	uint64_t origRequest, 
	ATMarketMoversDbResponseType responseType, 
	LPATMARKET_MOVERSDB_RESPONSE pResponse);

/**
*	Callback for quote database snapshot response. This function is called asynchronously by the ActiveTick API's internal thread in response to 
*	ATCreateQuoteDbRequest/ATSendRequest call sequence.
*	@param hOrigRequest Original request generated by ATCreateQuoteDbRequest function. Use ATCloseRequest function to close the request handle inside your callback handler.
*	@param responseType One of the ATQuoteDbResponseType enum items.
*	@param pResponse Pointer to ATQUOTEDB_RESPONSE structure containing the quote database snapshot response payload. The pointer points to the first location of 
*		quote database response. Use responseCount to determine how many structures are present.
*	@param responseCount Count of how many ATQUOTEDB_RESPONSE structures are present in current response.
*	@see ATQuoteDbResponseType
*	@see LPATMARKET_MOVERSDB_RESPONSE
*	@see ATCreateQuoteDbRequest
*	@see ATSendRequest
*	@see ATCloseRequest
*/
typedef void (*ATQuoteDbResponseCallback)(
	uint64_t origRequest, 
	ATQuoteDbResponseType responseType, 
	LPATQUOTEDB_RESPONSE pResponse, 
	uint32_t responseCount);

/**
*	Callback for quote stream response. This function is called asynchronously by the ActiveTick API's internal thread in response to ATCreateQuoteStreamRequest/ATSendRequest call sequence.
*	@param origRequest Original request generated by ATCreateQuoteStreamRequest function. Use ATCloseRequest function to close the request handle inside your callback handler.
*	@param responseType One of the ATStreamResponseType enum items.
*	@param pResponse Pointer to ATQUOTESTREAM_RESPONSE structure containing the quote stream response payload. The pointer points to the first location of quote stream response. 
*		Use responseCount to determine how many structures are present.
*	@param responseCount Count of how many ATQUOTESTREAM_RESPONSE structures are present in current response.
*	@see ATQuoteStreamResponseType
*	@see LPATQUOTEDB_RESPONSE
*	@see ATCreateQuoteStreamRequest
*	@see ATSendRequest
*	@see ATCloseRequest
*/
typedef void (*ATQuoteStreamResponseCallback)(
	uint64_t origRequest, 
	ATStreamResponseType responseType, 
	LPATQUOTESTREAM_RESPONSE pResponse, 
	uint32_t responseCount);

/**
*	Callback for market movers stream response. This function is called asynchronously by the ActiveTick API's internal thread in response to ATCreateMarketMoversStreamRequest/ATSendRequest 
*		call sequence.
*	@param origRequest Original request generated by ATCreateMarketMoversStreamRequest function. Use ATCloseRequest function to close the request handle inside your callback handler.
*	@param responseType One of the ATStreamResponseType enum items.
*	@param pResponse Pointer to ATMARKET_MOVERS_STREAM_RESPONSE structure containing the market movers stream response payload.
*	@see ATStreamResponseType
*	@see LPATQUOTESTREAM_RESPONSE
*	@see ATCreateMarketMoversStreamRequest
*	@see ATSendRequest
*	@see ATCloseRequest
*/
typedef void (*ATMarketMoversStreamResponseCallback)(
	uint64_t origRequest, 
	ATStreamResponseType responseType, 
	LPATMARKET_MOVERS_STREAM_RESPONSE pResponse);

/**
*	Callback for all streaming updates. This function is called asynchronously by the ActiveTick API's internal thread. 
*	@param pUdpate Pointer to ATSTREAM_UDPATE structure containing information about current stream update.
*	@note Use this callback to process all streaming updates from ActiveTick data feed.
*	@see LPATSTREAM_UPDATE
*/
typedef void (*ATStreamUpdateCallback)(LPATSTREAM_UPDATE pUpdate);

/**
*	Callback for server time update. This function is called asynchronously by the ActiveTick API's internal thread. 
*	@param pServerTime Period timestamp sent from the ActiveTick server. Time is in Eastern Standard time zone.
*	@see LPSTREAM_UPDATE
*/
typedef void (*ATServerTimeUpdateCallback)(LPATTIME pServerTime);

/**
*	Callback for any time out. This function is called asynchronously by the ActiveTick API's internal thread when a time out occurs for any request initiated via ATSendRequest function.
*	@param origRequest Original request generated by one of the ATCreate* functions. ActiveTick API guarantees either a valid response callback or timeout callback for any 
*		request sent using ATSEndRequest function.
*	@note The handle needs to be closed during processing of the callback by using ATCloseRequest function.
*	@see ATSendRequest
*	@see ATCloseRequest
*/
typedef void (*ATRequestTimeoutCallback)(uint64_t origRequest);

/**
*	Callback for session status change. This function is called asynchronously by the ActiveTick API's internal thread when there is a change in the session, such as Connect or 
*		Disconnect event.
*	@param session Session handle which caused the callback notification.
*	@param statusType One of the ATSessionStatusType enum status types.
*	@see ATSessionStatusType
*/
typedef void (*ATSessionStatusChangeCallback)(
	uint64_t session, 
	ATSessionStatusType statusType);

/**
 * Callback for all Tick history responses. This function is called asynchronously by ActiveTick API's internal thread in response to ATCreateTickHistoryDbRequest/ATSendRequest call sequence.
 * @param origRequest Original request generated by one of the ATCreateTickHistoryDbRequest functions. Use ATCloseRequest function to close the request handle inside your callback handler.
 * @param responseType One of the ATTickHistoryResponseType enum response type values.
 * @param pResponse Pointer to ATTICKHISTORY_RESPONSE structure containing the response payload.
 * @see ATTickHistoryResponseType
 * @see LPATTICKHISTORY_RESPONSE
 * @see ATCreateTickHistoryDbRequest
 * @see ATSendRequest
 * @see ATCloseRequest
 */
typedef void (*ATTickHistoryResponseCallback)(
	uint64_t origRequest, 
	ATTickHistoryResponseType responseType, 
	LPATTICKHISTORY_RESPONSE pResponse);

/**
*	Callback for market holidays response. This function is called asynchronously by the ActiveTick API's internal thread in response to ATCreateMarketHolidaysRequest/ATSendRequest 
*		call sequence.
*	@param origRequest Original request handle returned by ATCreateMarketHolidaysRequest call.
*	@param pItems Pointer to ATMARKET_HOLIDAYSLIST_ITEM containing first holiday. 
*	@param itemsCount Contains number of ATMARKET_HOLIDAYSLIST_ITEM structures inside pItems pointer.
*	@see ATMARKET_HOLIDAYSLIST_ITEM
*	@see ATCreateMarketHolidaysRequest
*	@see ATSendRequest
*/
typedef void (*ATMarketHolidaysResponseCallback)(
	uint64_t origRequest, 
	LPATMARKET_HOLIDAYSLIST_ITEM pItems, 
	uint32_t itemsCount);

/**
*	Callback for Sector list response. This function is called asynchronously by the ActiveTick API's internal thread in response to ATCreateSectorListRequest/ATSendRequest 
*		call sequence.
*	@param origRequest Original request handle returned by ATCreateSectorListRequest call.
*	@param pRecords Pointer to LPATSECTORLIST_RECORD containing array of sectors, comprised of sector/industry pairs. 
*	@param recordsCount Contains number of record structures.
*	@see ATSECTORLIST_RECORD
*	@see ATCreateSectorListRequest
*	@see ATSendRequest
*/
typedef void (*ATSectorListResponseCallback)(
	uint64_t origRequest, 
	LPATSECTORLIST_RECORD pRecords, 
	uint32_t recordsCount);

/**
*	Callback for Constituent list response. This function is called asynchronously by the ActiveTick API's internal thread in response to ATCreateConstituentListRequest/ATSendRequest 
*		call sequence.
*	@param origRequest Original request handle returned by ATCreateConstituentListRequest call.
*	@param pRecords Pointer to LPATSYMBOL containing array of symbols. 
*	@param symbolsCount Contains number of record structures.
*	@see ATSYMBOL
*	@see ATCreateConstituentListRequest
*	@see ATSendRequest
*/

typedef void (*ATConstituentListResponseCallback)(
	uint64_t origRequest, 
	LPATSYMBOL pSymbols, 
	uint32_t symbolsCount);

/*----------------------------------------------------------------------------------------------------------------------------------------
* API and initialization functions
* ----------------------------------------------------------------------------------------------------------------------------------------
*/

/**
*	Initialize ActiveTick's API. This function must be called before any other can be function called.
*	@note Use ATShutdownAPI function to uninitialize.
*	@return BOOL Returns true if successful, false otherwise.
*	@see ATShutdownAPI
*/
ACTIVETICKSERVERAPI_API bool ATInitAPI();

/**
*	Shut down ActiveTick's API and releases all resources.
*	@return true if successful or false otherwise.
*	@see ATInitAPI
*/
ACTIVETICKSERVERAPI_API bool ATShutdownAPI();

/**
*	Return current API version.
*	@return API version.
*/
ACTIVETICKSERVERAPI_API uint32_t ATGetAPIVersion();

/**
*	Return queued streaming updates.
*	@param session Session handle for which to retrieve the count.
*	@return uint32_t Number of queued streaming updates.
*	@note This function returns valid data only if isUsingStreamQueue flag is set to true during the call to ATInitSession
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint32_t ATGetSessionQueuedStreamUpdates(uint64_t session);

/**
*	Return total amount of bytes received for given session.
*	@param session Session handle for which to retrieve the received bytes count.
*	@return uint64_t Number of bytes received since last session initialization.
*/
ACTIVETICKSERVERAPI_API uint64_t ATGetSessionTotalRecvedByteCount(uint64_t session);

/**
*	Return total amount of bytes received for given session.
*	@param session Session handle for which to retrieve the received bytes count.
*	@return uint64_t Number of msgs received since last session initialization.
*/
ACTIVETICKSERVERAPI_API uint64_t ATGetSessionTotalRecvedMsgCount(uint64_t session, ATSessionTotalRecvedMsgType type);

/**
*	Create ActiveTick session. Each session is represented by a single connection to ActiveTick's servers.
*	@note ATInitAPI must be called prior to session creation.
*	@note Use ATDestroySession function to close session and release all resources associated with the session.
*	@return HANDLE Session handle.
*	@see ATDestroySession
*	@see ATInitAPI
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateSession();

/**
*	Destroy ActiveTick session by closing underlying server connection, and cleaning up any resources allocated for current session.
*	@param session Session handle
*	@note ATCreateSession must be called prior to session destruction.
*	@see ATCreateSession
*/
ACTIVETICKSERVERAPI_API void ATDestroySession(uint64_t session);

/**
*	Set user id for ActiveTick API identification and usage. This function is typically used by third party developers to validate their credentials with ActiveTick servers.
*	@param session Session handle for which to set the user id.
*	@param pAPIUserId Pointer to a ATGUID assigned by ActiveTick support (support@activetick.com).
*	@note This function is used strictly for identifying API users, and is different from ActiveTick Platform's user id.
*	@note Call this function after session has been created, but prior to initialization of current session.
*	@return true if successful or false otherwise.
*	@see ATCreateSession
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API bool ATSetAPIUserId(
	uint64_t session, 
	LPATGUID pAPIUserId);

/**
*	Set the callback for server time updates. This callback will be called every time when ActiveTick's API receives a time synchronization message from the server.
*	@param session Session handle for which to set the callback.
*	@param pCallback Pointer to ATServerTimeUpdateCallback function.
*	@return true if successful or false otherwise.
*	@see ATServerTimeUpdateCallback
*/
ACTIVETICKSERVERAPI_API bool ATSetServerTimeUpdateCallback(
	uint64_t session, 
	ATServerTimeUpdateCallback pCallback);

/**
*	Set the callback all stream updates. This callback will be called every time when ActiveTick's API receives a stream update.
*	@param session Session handle for which to set the callback.
*	@param pCallback Pointer to ATStreamUpdateCallback function.
*	@return true if successful or false otherwise.
*	@see ATStreamUpdateCallback
*/
ACTIVETICKSERVERAPI_API bool ATSetStreamUpdateCallback(
	uint64_t session, 
	ATStreamUpdateCallback pCallback);

/**
*	Initialize session handle. This function is responsible for spawning a server connection thread, and initialization of various internal data structures.
*	@param session Session handle created by ATCreateSession() prior to calling this function.
*	@param primaryServerHostname Hostname of the primary ActiveTick server.
*	@param backupServerHostname Hostname of the backup ActiveTick server.
*	@param serverPort ActiveTick Server's port. This value is typically port 443.
*	@param pCallback Callback function which will be used during various changes to sessions such as connects and disconnects.
*	@param isUsingInternalQueue Flag used to indicate whether the API should use internal queue for calling stream callbacks. Default is false.
*	@note Use ATShutdownSession to close server connection and clean up internal data structures.
*	@note ATCreateSession must be called prior to calling this function.
*	@note For primary and backup server host names, the following host name should be used: activetick1.activetick.com, and activetick2.activetick.com.
*	@note All stream handling should be completed quickly to prevent buffering of too much data at the server level. If isUsingInternalQueue flag is set to true, the API 
*		will buffer all incoming streaming data into internal queue, and will have an internal thread call into ATStreamUpdateCallback, rather than having internal 
*		communication thread call the callback. 
*	@return true if successful or false otherwise.
*	@see ATCreateSession
*	@see ATShutdownSession
*	@see ATSessionStatusChangeCallback
*/
ACTIVETICKSERVERAPI_API bool ATInitSession(
	uint64_t session, 
	const char* primaryServerHostname, 
	const char* backupServerHostname, 
	uint32_t serverPort, 
	ATSessionStatusChangeCallback pCallback, 
	bool isUsingInternalQueue = false);

/**
*	Close server connection.
*	@param session Session handle.
*	@note ATInitSession must be called prior to session shutdown.
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API void ATShutdownSession(uint64_t session);

/**
*	Redirect window message from application using ActiveTick's API. ActiveTick's internal thread calls specified HWND with specified message id, and application should use 
*	this method to reflect all messages back to ActiveTick's API. 
*	@param session Session handle for which to redirect the message.
*	@param wParam WPARAM value from WindowProc.
*	@param lParam LPARAM value from WindowProc.
*	@note This function should only be used if given session was initialized with using message pumps to synchronize notifications to a given HWND thread context.
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API void ATRedirectPumpMessage(
	uint64_t session, 
	uint64_t wParam, 
	uint64_t lParam);

#ifdef _WIN32
/**
*	Initialize session handle. This function is responsible for spawning a server connection thread, and initialization of various internal data structures. In addition, this 
*	function also takes a HWND window handle, which is used for pumping various messages through the context of the thread owned by the HWND.
*	@param session Session handle created by ATCreateSession() prior to calling this function.
*	@param primaryServerHostname Hostname of the primary ActiveTick server.
*	@param backupServerHostname Hostname of the backup ActiveTick server.
*	@param serverPort ActiveTick Server's port. This value is typically port 443.
*	@param pCallback Callback function which will be used during various changes to sessions such as connects and disconnects.
*	@param hwndMessagePumpWindow Window handle that will be used by API's internal thread to pump messages, so that all callbacks happen within the same thread context as HWND.
*	@param messageId Message id used by the caller. This id will be used during SendMessage() to send messages for specified HWND.
*	@note Use ATShutdownSession to close server connection and clean up internal data structures.
*	@note ATCreateSession must be called prior to calling this function.
*	@note For primary and backup server host names, the following host name should be used: activetick1.activetick.com, and activetick2.activetick.com.
*	@return true if successful or false otherwise.
*	@see ATCreateSession
*	@see ATShutdownSession
*	@see ATSessionStatusChangeCallback
*/
ACTIVETICKSERVERAPI_API bool ATInitSession(
	uint64_t session, 
	const char* primaryServerHostname, 
	const char* backupServerHostname, 
	uint32_t serverPort, 
	ATSessionStatusChangeCallback pCallback, 
	HWND hwndMessagePumpWindow, 
	uint32_t messageId);

#endif




/*----------------------------------------------------------------------------------------------------------------------------------------
* Request functions
* ----------------------------------------------------------------------------------------------------------------------------------------
*/

/**
*	Create request for history bars. This function selects bars between two specific times.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol ATSYMBOL for which to create the request.
*	@param barHistoryType One of ATBarHistoryType enum types.
*	@param intradayMinuteCompression If barHistoryType is BarHistoryIntraday, then this parameter specifies a range of 1-60 minutes bar compression, otherwise it should be 0.
*	@param beginDateTime Beginning of the date+time range.
*	@param endDateTime Ending of the date+time range.
*	@param pCallback Pointer to ATBarHistoryResponseCallback callback notification function. This function will be called upon successful receipt of bar history data.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATBarHistoryResponseCallback 
*		upon successful data receipt from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATBarHistoryType
*	@see ATBarHistoryResponseCallback
*	@see ATCreateSession
*	@see ATSendRequest
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateBarHistoryDbRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	ATBarHistoryType barHistoryType, 
	uint8_t intradayMinuteCompression, 
	const ATTIME& beginDateTime,
	const ATTIME& endDateTime, 
	ATBarHistoryResponseCallback pCallback);

/**
*	Create request for history bars. This function selects bars from a given time point, and using the back or forward cursor, retrieves specified count of bars.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol ATSYMBOL for which to create the request.
*	@param barHistoryType One of ATBarHistoryType enum types.
*	@param intradayMinuteCompression If barHistoryType is BarHistoryIntraday, then this parameter specifies a range of 1-60 minutes bar compression, otherwise it should be 0.
*	@param beginDateTime Beginning of the date+time range.
*	@param recordsWanted Bars to retrieve.
*	@param cursorType One of the ATCursorType enum types, specifying which direction to move to.
*	@param pCallback Pointer to ATBarHistoryResponseCallback callback notification function. This function will be called upon successful receipt of bar history data.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATBarHistoryResponseCallback 
*		upon successful data receipt from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATBarHistoryType
*	@see ATBarHistoryResponseCallback
*	@see ATCreateSession
*	@see ATSendRequest
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateBarHistoryDbRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	ATBarHistoryType barHistoryType, 
	uint8_t intradayMinuteCompression, 
	const ATTIME& beginDateTime, 
	uint32_t recordsWanted, 
	ATCursorType cursorType, 
	ATBarHistoryResponseCallback pCallback);

/**
*	Create request for history bars. This function selects latest bars from present time, going back to specified count of bars.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol ATSYMBOL for which to create the request.
*	@param barHistoryType One of ATBarHistoryType enum types.
*	@param intradayMinuteCompression If barHistoryType is BarHistoryIntraday, then this parameter specifies a range of 1-60 minutes bar compression, otherwise it should be 0.
*	@param recordsWanted Bars to retrieve.
*	@param pCallback Pointer to ATBarHistoryResponseCallback callback notification function. This function will be called upon successful receipt of bar history data.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATBarHistoryResponseCallback 
*		upon successful data receipt from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATBarHistoryType
*	@see ATBarHistoryResponseCallback
*	@see ATCreateSession
*	@see ATSendRequest
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateBarHistoryDbRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	ATBarHistoryType barHistoryType, 
	uint8_t intradayMinuteCompression, 
	uint32_t recordsWanted, 
	ATBarHistoryResponseCallback pCallback);

/**
*	Create ActiveTick user login request. 
*	@param session Session handle created with prior call to ATCreateSession().
*	@param userid ActiveTick user id.
*	@param password ActiveTick user password.
*	@param pCallback Pointer to ATLoginResponseCallback callback function. This function will be called when API receives a login response from the server.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATLoginResponseCallback upon 
*		successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATLoginResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateLoginRequest(
	uint64_t session, 
	const wchar16_t* userid, 
	const wchar16_t* password, 
	ATLoginResponseCallback pCallback);

/**
*	Create request for tick data. This function selects tick data between two specific times.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol ATSYMBOL for which to create the request.
*	@param selectTrades If set to true, the server will return TRADE records.
*	@param selectQuotes If set to true, the server will return QUOTE records.
*	@param beginDateTime Beginning of the date+time range.
*	@param endDateTime Ending of the date+time range.
*	@param pCallback Pointer to ATTickHistoryResponseCallback callback notification function. This function will be called upon successful receipt of tick history data.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATTickHistoryResponseCallback upon 
*		successful data receipt from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATTickHistoryResponseCallback
*	@see ATCreateSession
*	@see ATSendRequest
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateTickHistoryDbRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	bool selectTrades, 
	bool selectQuotes, 
	const ATTIME& beginDateTime, 
	const ATTIME& endDateTime, 
	ATTickHistoryResponseCallback pCallback);

/**
*	Create request for tick data. This function selects tick data from a given time point, and using the back or forward cursor, retrieves specified count of records.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol ATSYMBOL for which to create the request.
*	@param selectTrades If set to true, the server will return TRADE records.
*	@param selectQuotes If set to true, the server will return QUOTE records.
*	@param beginDateTime Beginning of the date+time range.
*	@param recordsWanted Records to retrieve.
*	@param cursorType One of the ATCursorType enum types, specifying which direction to move to.
*	@param pCallback Pointer to ATTickHistoryResponseCallback callback notification function. This function will be called upon successful receipt of tick history data.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATTickHistoryResponseCallback upon 
*		successful data receipt from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATTickHistoryResponseCallback
*	@see ATCreateSession
*	@see ATSendRequest
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateTickHistoryDbRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	bool selectTrades, 
	bool selectQuotes, 
	const ATTIME& beginDateTime, 
	uint32_t recordsWanted, 
	ATCursorType cursorType, 
	ATTickHistoryResponseCallback pCallback);

/**
*	Create request for tick data. This function selects latest tick data from present time, going back to specified count of records.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol ATSYMBOL for which to create the request.
*	@param selectTrades If set to true, the server will return TRADE records.
*	@param selectQuotes If set to true, the server will return QUOTE records.
*	@param recordsWanted Records to retrieve.
*	@param pCallback Pointer to ATTickHistoryResponseCallback callback notification function. This function will be called upon successful receipt of tick history data.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATTickHistoryResponseCallback upon 
*		successful data receipt from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATTickHistoryResponseCallback
*	@see ATCreateSession
*	@see ATSendRequest
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateTickHistoryDbRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	bool selectTrades, 
	bool selectQuotes, 
	uint32_t recordsWanted, 
	ATTickHistoryResponseCallback pCallback);

/**
*	Create request for tick data. This function uses direct database offset value to retrieve data from data pages. 
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol ATSYMBOL for which to create the request.
*	@param selectTrades If set to true, the server will return TRADE records.
*	@param selectQuotes If set to true, the server will return QUOTE records.
*	@param pagesWanted Pages to retrieve. Each page contains variable number of records.
*	@param offset Offset value to use to look up records. The value must be a valid offset returned from previous calls, or set to -1 to retrieve last record inside the database.
*	@param dbdate Date of the datatabase. ActiveTick ticker plant stores tick records inside daily files, and dbdate param identifies the date of which database to retrieve the records from.
*	@param pCallback Pointer to ATTickHistoryResponseCallback callback notification function. This function will be called upon successful receipt of tick history data.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note This function uses offset as an index to look up records for given symbol. Once the callback is called, the callback will be passed an offset for the next lookup, if one is available. 
*		If there are no more pages available for the database identified in dbdate, the offset will return with 0xffffffffffffffff value.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATTickHistoryResponseCallback upon 
*		successful data receipt from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATTickHistoryResponseCallback
*	@see ATCreateSession
*	@see ATSendRequest
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateTickHistoryDbRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	bool selectTrades, 
	bool selectQuotes, 
	uint32_t pagesWanted, 
	uint64_t offset, 
	const ATTIME& dbdate, 
	ATTickHistoryResponseCallback pCallback);

/**
*	Create market holidays list request. This function returns all market holidays for a given year range.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param yearsGoingBack Years to go back from current year.
*	@param yearsGoingForward Years to go forward from current year.
*	@param exchangeType Exchange-specific holidays
*	@param countryType Country-specific holidays
*	@param pCallback Pointer to ATMarketHolidaysResponseCallback callback function. This function will be called when API receives a response from the server.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATMarketHolidaysResponseCallback 
*		upon successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATMarketHolidaysResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateMarketHolidaysRequest(
	uint64_t session, 
	uint8_t yearsGoingBack, 
	uint8_t yearsGoingForward, 
	ATExchangeType exchangeType, 
	ATCountryType countryType, 
	ATMarketHolidaysResponseCallback pCallback);

/**
*	Create market movers real-time snapshot database request.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbols Pointer to an array of symbols for which to retrieve market movers records.
*	@param symbolCount Count of symbols inside the symbols array.
*	@param pCallback Pointer to ATMarketMoversDbResponseCallback callback function. This function will be called when API receives a response from the server.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note The following is an accepted list of symbols:
*	@li "VL" Top Volume
*	@li "NG" Net Gainers
*	@li "NL" Net Losers
*	@li "PG" Percent Gainers
*	@li "PL" Percent Losers
*	@note Desired exchange is specified in ATSYMBOL::exchangeType field. ATSYMBOL::symbolType must be set to ATSymbolType::SymbolTopMarketMovers and ATSYMBOL::countryType must be set 
*		to ATCountryType::CountryUnitedStates.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATMarketMoversDbResponseCallback 
*		upon successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATMarketMoversDbResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateMarketMoversDbRequest(
	uint64_t session, 
	const LPATSYMBOL symbols, 
	uint16_t symbolCount, 
	ATMarketMoversDbResponseCallback pCallback);

/**
*	Create market movers real-time stream request.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbol Symbol for which to create the stream request.
*	@param requestType One of the ATStreamRequestType enum types specifying which type of stream operation to perform.
*	@param pCallback Pointer to ATMarketMoversStreamResponseCallback callback function. This function will be called when API receives a response from the server.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note The following is an accepted list of symbols:
*	@li "VL" Top Volume
*	@li "NG" Net Gainers
*	@li "NL" Net Losers
*	@li "PG" Percent Gainers
*	@li "PL" Percent Losers
*	@note Desired exchange is specified in ATSYMBOL::exchangeType field. ATSYMBOL::symbolType must be set to ATSymbolType::SymbolTopMarketMovers and ATSYMBOL::countryType must be set 
*		to ATCountryType::CountryUnitedStates.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATMarketMoversStreamResponseCallback 
*		upon successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATMarketMoversStreamResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateMarketMoversStreamRequest(
	uint64_t session, 
	const ATSYMBOL& symbol, 
	ATStreamRequestType requestType, 
	ATMarketMoversStreamResponseCallback pCallback);

/**
*	Create real-time quote snapshot database request.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbols Pointer to an array of symbols for which to retrieve quote records.
*	@param symbolCount Count of symbols inside the symbols array.
*	@param fields Pointer to an array of ATQuoteFieldTypes for which to retrieve the values.
*	@param fieldCount Count of fields inside the fields array.
*	@param pCallback Pointer to ATQuoteDbResponseCallback callback function. This function will be called when API receives a response from the server.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATQuoteDbResponseCallback upon 
*		successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATQuoteDbResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateQuoteDbRequest(
	uint64_t session, 
	const LPATSYMBOL symbols, 
	uint16_t symbolCount, 
	const ATQuoteFieldType* fields, 
	uint16_t fieldCount, 
	ATQuoteDbResponseCallback pCallback);

/**
*	Create real-time quote stream request.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param symbols Pointer to an array of symbols for which to perform the stream request.
*	@param symbolCount Count of symbols inside the symbols array.
*	@param requestType One of the ATStreamRequestType specifying the type of stream operation.
*	@param pCallback Pointer to ATQuoteStreamResponseCallback callback function. This function will be called when API receives a response from the server.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATQuoteStreamResponseCallback upon 
*		successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATQuoteStreamResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateQuoteStreamRequest(
	uint64_t session, 
	const LPATSYMBOL symbols, 
	uint16_t symbolCount, 
	ATStreamRequestType requestType, 
	ATQuoteStreamResponseCallback pCallback);

/**
*	Create Sector list request. The list comes back as string pairs of sector/industry.
*	@param session Session handle created with prior call to ATCreateSession().
*	@param pCallback Pointer to ATSectorListResponseCallback callback function. This function will be called when API receives a response from the server.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATSectorListResponseCallback upon 
*		successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATSectorListResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateSectorListRequest(
	uint64_t session, 
	ATSectorListResponseCallback pCallback);

/**
*	Create Constituents list request. This function is used to retrieve a list for a given constituent type. 
*	@param session Session handle created with prior call to ATCreateSession().
*	@param pCallback Pointer to ATConstituentListResponseCallback callback function. This function will be called when API receives a response from the server.
*	@param constituentListType One of ATConstituentListType types, Sector, Index, or OptionChain
*	@param key Specifies the key.
*	@return uint64_t Returns a handle to the request. This handle must be used with ATSendRequest function.
*	@note If constituent type is Sector, the key should be formatted as follows: sectorname/nindustryname.
*	@note If constituent type is Index, the key should containt the full index symbol.
*	@note If constituent type is OptionChain, the key should containt the underlying symbol, such as "AAPL.
*	@note Once request handle is created, use SendRequest to send the request to the server. ActiveTick's API guarantees either a notification through ATSectorListResponseCallback upon 
*		successful response from the server, or a time out notification through ATRequestTimeoutCallback.
*	@see ATSYMBOL
*	@see ATSectorListResponseCallback
*	@see ATInitSession
*/
ACTIVETICKSERVERAPI_API uint64_t ATCreateConstituentListRequest(uint64_t 
	session, 
	ATConstituentListType constituentListType, 
	const wchar16_t* key, 
	ATConstituentListResponseCallback pCallback);

/**
*	Close request handle generated by one of the ATCreate* request functions.
*	@param session Session handle which initiated original request.
*	@param request Request handle to close.
*	@return true if successful or false otherwise.
*/
ACTIVETICKSERVERAPI_API bool ATCloseRequest(
	uint64_t session, 
	uint64_t request);

/**
*	Send request to the server.
*	@param session Session handle which initiated original request.
*	@param request Request handle generated by one of the request functions.
*	@param timeout Time out in milliseconds to wait before ATRequestTimeoutCallback callback is called. To use default time out, specify DEFAULT_REQUEST_TIMEOUT constant.
*	@param pCallback Pointer to ATRequestTimeoutCallback callback function. This function will be called if time out is reached.
*	@return true if successful or false otherwise.
*/
ACTIVETICKSERVERAPI_API bool ATSendRequest(
	uint64_t session, 
	uint64_t request, 
	uint32_t timeout, 
	ATRequestTimeoutCallback pCallback);